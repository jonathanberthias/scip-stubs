"""
Variant of stubtest that just checks the methods in classes
and ensures the order is the same in the source and in the stubs.
"""

import difflib
import re
from collections import defaultdict
from pathlib import Path
from typing import Dict, List

# Methods that are in the source .pxi files but not in the stubs
IGNORES = [
    ("Column", "__init__"),
    ("Expr", "__next__"),
    ("Model", "__eq__"),
    ("*", "__dealloc__"),
    ("*", "__eq__"),
    ("*", "__ge__"),  # generated by __richcmp__
    ("*", "__le__"),  # generated by __richcmp__
    ("*", "__nonzero__"),
    ("*", "__repr__"),
    ("*", "__richcmp__"),  # generates all comparison operations
    ("*", "name"),  # method (property) in the stubs, attribute in source
]


def get_methods_by_class(lines: List[str]) -> Dict[str, List[str]]:
    classes: defaultdict[str, list[str]] = defaultdict(list)
    current_class = None
    for i, line in enumerate(lines):
        m = re.match(r"^(?:cdef )?class (\w+)", line)
        if m:
            current_class = m.group(1)
        elif "cdef" in line:
            continue
        elif line and not line.startswith("  ") and not line.startswith("\t"):
            current_class = None
        elif current_class:
            # Some files have 2 spaces indentation
            m = re.match(r"\s{2,4}def (\w+)\(", line)
            if not m:
                continue
            fname = m.group(1)
            if fname.startswith("_") and not fname.startswith("__"):
                continue  # private
            if (current_class, fname) in IGNORES or ("*", fname) in IGNORES:
                continue
            if fname in classes[current_class]:
                continue  # an overload, don't repeat
            classes[current_class].append(fname)
    return dict(classes)


def load_scip_source() -> List[str]:
    lib_site_packages = Path(__file__).absolute().parent / ".venv/lib"
    site_packages = lib_site_packages.glob("python*/site-packages/pyscipopt")
    scip_dir = next(site_packages)
    sources = scip_dir.glob("*.pxi")

    scip_lines = []
    for scip_file in sources:
        scip_lines.extend(scip_file.read_text().splitlines())
    return scip_lines


def load_stub_source() -> List[str]:
    stub_file = Path(__file__).parent / "pyscipopt/scip.pyi"
    return stub_file.read_text().splitlines()


def compare() -> int:
    scip_source = load_scip_source()
    stub_source = load_stub_source()
    stub_methods = get_methods_by_class(stub_source)
    scip_methods = get_methods_by_class(scip_source)

    scip_keys = set(scip_methods)
    stub_keys = set(stub_methods)
    stub_extra = stub_keys - scip_keys
    assert not stub_extra, f"Extra classes in stub: {stub_extra}"
    scip_extra = scip_keys - stub_keys
    assert not scip_extra, f"Extra classes in scip: {scip_extra}"

    status = 0
    for klass in stub_methods:
        scip_meths = scip_methods[klass]
        stub_meths = stub_methods[klass]
        diff = list(
            difflib.unified_diff(
                stub_meths, scip_meths, "stub", "source", n=1, lineterm=""
            )
        )
        if diff:
            status += 1
            print(klass)
            print(end="\t")
            print("\n\t".join(diff))
    return status


if __name__ == "__main__":
    exit(compare())
